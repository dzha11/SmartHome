package devices;

import util.Logger;

/**
 * Light ‚Äî –ª–∞–º–ø–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º on/off, —è—Ä–∫–æ—Å—Ç—å—é –∏ —Ä–µ–∂–∏–º–æ–º dim.
 * –¢–µ–ø–µ—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≥–æ—Ä–µ—Ç—å –∏ –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω–Ω–æ–π üí°
 */
public class Light implements Device {
    private final String location;
    private boolean isOn;
    private int brightness;   // 0..100
    private boolean dimMode;  // –µ—Å–ª–∏ true ‚Äî –ø–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
    private boolean isBurnedOut; // –Ω–æ–≤–∞—è —Ñ–∏—á–∞: –ª–∞–º–ø–∞ –º–æ–∂–µ—Ç —Å–≥–æ—Ä–µ—Ç—å

    public Light(String location) {
        this.location = location;
        this.isOn = false;
        this.brightness = 70;
        this.dimMode = false;
        this.isBurnedOut = false;
    }

    @Override
    public void turnOn() {
        if (isBurnedOut) {
            Logger.log("[" + location + "] ‚ùå –õ–∞–º–ø–∞ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è ‚Äî –æ–Ω–∞ —Å–≥–æ—Ä–µ–ª–∞!");
            return;
        }
        if (!isOn) {
            isOn = true;
            Logger.log("[" + location + "] Light turned ON. Brightness: " + brightness + "%");
            if (dimMode) Logger.log("[" + location + "] Light is in DIM mode (smooth).");
        } else {
            Logger.log("[" + location + "] Light already ON.");
        }
    }

    @Override
    public void turnOff() {
        if (isOn) {
            isOn = false;
            Logger.log("[" + location + "] Light turned OFF.");
        } else {
            Logger.log("[" + location + "] Light already OFF.");
        }
    }

    @Override
    public void performFunction() {
        if (isBurnedOut) {
            Logger.log("[" + location + "] ‚ö†Ô∏è –õ–∞–º–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–≥–æ—Ä–µ–ª–∞).");
        } else if (isOn) {
            Logger.log("[" + location + "] Light is shining at " + brightness + "%");
        } else {
            Logger.log("[" + location + "] Light is off");
        }
    }

    public void setBrightness(int value) {
        if (isBurnedOut) {
            Logger.log("[" + location + "] ‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å ‚Äî –ª–∞–º–ø–∞ —Å–≥–æ—Ä–µ–ª–∞.");
            return;
        }
        int v = Math.max(0, Math.min(100, value));
        this.brightness = v;
        Logger.log("[" + location + "] Brightness set to " + brightness + "%");
        if (!isOn) Logger.log("[" + location + "] Note: brightness changed while light is OFF");
    }

    public int getBrightness() {
        return brightness;
    }

    public void enableDimMode() {
        dimMode = true;
        Logger.log("[" + location + "] Dim mode enabled");
    }

    public void disableDimMode() {
        dimMode = false;
        Logger.log("[" + location + "] Dim mode disabled");
    }

    public boolean isDimMode() {
        return dimMode;
    }

    public void burnOut() {
        if (!isBurnedOut) {
            isBurnedOut = true;
            isOn = false;
            Logger.log("[" + location + "] üí• –õ–∞–º–ø–∞ —Å–≥–æ—Ä–µ–ª–∞!");
        }
    }

    public void replace() {
        if (isBurnedOut) {
            isBurnedOut = false;
            Logger.log("[" + location + "] üîß –õ–∞–º–ø–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É—é üí°");
        } else {
            Logger.log("[" + location + "] –õ–∞–º–ø–∞ –≤ –ø–æ—Ä—è–¥–∫–µ, –∑–∞–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        }
    }

    public boolean isBurnedOut() {
        return isBurnedOut;
    }

    @Override
    public boolean isOn() {
        return isOn;
    }

    @Override
    public String getName() {
        return "Light (" + location + ")";
    }
}
